import streamlit as st
import pandas as pd

def is_valid_stt(value):
    """H√†m ki·ªÉm tra STT l√† s·ªë nguy√™n h·ª£p l·ªá"""
    try:
        # Cho ph√©p s·ªë float nh∆∞ 1.0 v·∫´n t√≠nh l√† 1
        val = float(value)
        return val.is_integer() and val > 0
    except:
        return False




def process_sheet(df, sheet_name, ma_dai_ly_list=None):
    st.write(f"### Sheet: {sheet_name}")

    required_columns = {'STT', 'M√£ ƒë·∫°i l√Ω', 'Doanh thu th·ª±c thu'}
    if not required_columns.issubset(df.columns):
        st.warning(f"Sheet '{sheet_name}' thi·∫øu m·ªôt trong c√°c c·ªôt: {', '.join(required_columns)}")
        return None

    df_filtered = df[df['STT'].apply(is_valid_stt)].copy()


    # L√†m s·∫°ch r·ªìi chuy·ªÉn ƒë·ªïi sang s·ªë (s·ª≠ d·ª•ng ki·ªÉu ti·∫øng Anh v·ªõi d·∫•u , l√† ngƒÉn nh√≥m v√† . l√† th·∫≠p ph√¢n)
    # L√†m s·∫°ch
    df_filtered['Doanh thu th·ª±c thu'] = (
        df_filtered['Doanh thu th·ª±c thu']
        .astype(str)
        .str.strip()
        .replace("-", "", regex=False)
        .replace("", pd.NA)
        .str.replace(",", "", regex=False)  # X√≥a d·∫•u ph·∫©y ngƒÉn nh√≥m
    )

    # √âp ki·ªÉu s·ªë
    df_filtered['Doanh thu th·ª±c thu'] = pd.to_numeric(df_filtered['Doanh thu th·ª±c thu'], errors='coerce')
    df_filtered['Doanh thu th·ª±c thu'] = pd.to_numeric(df_filtered['Doanh thu th·ª±c thu'].astype(str).str.replace(',', ''), errors='coerce')

    # X·ª≠ l√Ω d·ªØ li·ªáu theo m√£ ƒë·∫°i l√Ω n·∫øu ƒë∆∞·ª£c cung c·∫•p
    dai_ly_data = {}
    if ma_dai_ly_list:
        for ma_dl in ma_dai_ly_list:
            df_dai_ly = df_filtered[df_filtered['M√£ ƒë·∫°i l√Ω'] == ma_dl]
            if not df_dai_ly.empty:
                tong_sheet = df_filtered['Doanh thu th·ª±c thu'].sum()  # T·ªïng doanh thu c·ªßa c·∫£ sheet
                thuc_thu = df_dai_ly['Doanh thu th·ª±c thu'].sum()     # Doanh thu c·ªßa ƒë·∫°i l√Ω
                ti_le = (thuc_thu / tong_sheet * 100) if tong_sheet != 0 else 0
                dai_ly_data[ma_dl] = {
                    'nguon': tong_sheet,  # L∆∞u t·ªïng doanh thu c·ªßa sheet
                    'thuc_thu': thuc_thu,
                    'ti_le': ti_le
                }

    total = df_filtered['Doanh thu th·ª±c thu'].sum()
    truong_phong = total * 0.01  # 1% doanh thu
    team_lead = total * 0.005    # 0.5% doanh thu
    quy_van_hanh_cttdtdbh = total * 0.005  # Qu·ªπ v·∫≠n h√†nh c√°c ch∆∞∆°ng tr√¨nh th√∫c ƒë·∫©y thi ƒëua b√°n h√†ng, g·∫Øn k·∫øt = 0.5% doanh thu

    st.write(f"T·ªïng 'Doanh thu th·ª±c thu': **{total:,.0f}**")
    st.write(f"Doanh thu chia Tr∆∞·ªüng ph√≤ng (1%): **{truong_phong:,.0f}**")
    st.write(f"Doanh thu chia Team Lead (0.5%): **{team_lead:,.0f}**")
    st.write(f"Qu·ªπ v·∫≠n h√†nh c√°c ch∆∞∆°ng tr√¨nh th√∫c ƒë·∫©y thi ƒëua b√°n h√†ng, g·∫Øn k·∫øt (0.5%): **{quy_van_hanh_cttdtdbh:,.0f}**")
        # T√≠nh t·ªïng c·ªßa c√°c d√≤ng "Lo·∫°i h√¨nh nghi·ªáp v·ª• g·ªëc" b·∫Øt ƒë·∫ßu b·∫±ng "XO"
    if 'Lo·∫°i h√¨nh nghi·ªáp v·ª• g·ªëc' in df.columns:
        df_filtered['Lo·∫°i h√¨nh nghi·ªáp v·ª• g·ªëc'] = df['Lo·∫°i h√¨nh nghi·ªáp v·ª• g·ªëc'].astype(str).str.strip()
        xo_rows = df_filtered[df_filtered['Lo·∫°i h√¨nh nghi·ªáp v·ª• g·ªëc'].str.startswith("XO")]
        tong_xo = xo_rows['Doanh thu th·ª±c thu'].sum()
        ti_le_15 = tong_xo * 0.015
        st.write(f"Chi ph√≠ ƒë√°nh gi√° r·ªßi ro v√† c·∫•p ƒë∆°n( b·∫Øt ƒë·∫ßu b·∫±ng 'XO'): **{ti_le_15:,.0f}**")
    else:
        st.warning("Kh√¥ng t√¨m th·∫•y c·ªôt 'Lo·∫°i h√¨nh nghi·ªáp v·ª• g·ªëc' ƒë·ªÉ t√≠nh t·ªïng m√£ XO.")

        # Ph√¢n lo·∫°i nghi·ªáp v·ª• g·ªëc XO / kh√¥ng XO v√† t√≠nh theo "Ngu·ªìn ƒë∆°n v·ªã"
    if sheet_name == "tele HN":
        if 'Lo·∫°i h√¨nh nghi·ªáp v·ª• g·ªëc' in df.columns and 'Ngu·ªìn ƒë∆°n v·ªã' in df.columns and 'M√£ ƒë·∫°i l√Ω' in df.columns:
            df_temp = df.copy()
            df_temp['Lo·∫°i h√¨nh nghi·ªáp v·ª• g·ªëc'] = df_temp['Lo·∫°i h√¨nh nghi·ªáp v·ª• g·ªëc'].astype(str).str.strip()
            df_temp['Ngu·ªìn ƒë∆°n v·ªã'] = pd.to_numeric(
                df_temp['Ngu·ªìn ƒë∆°n v·ªã'].astype(str).str.replace(",", "").str.strip(),
                errors='coerce'
            )
            
            # G·∫Øn nh√£n XO ho·∫∑c Non-XO
            df_temp['Nh√≥m XO'] = df_temp['Lo·∫°i h√¨nh nghi·ªáp v·ª• g·ªëc'].str.startswith("XO")
            
            # √Åp d·ª•ng h·ªá s·ªë theo nh√≥m
            df_temp['Gi√° tr·ªã quy ƒë·ªïi'] = df_temp.apply(
                lambda row: row['Ngu·ªìn ƒë∆°n v·ªã'] * (0.965 if row['Nh√≥m XO'] else 0.98),
                axis=1
            )
            
            # Nh√≥m theo M√£ ƒë·∫°i l√Ω v√† t√≠nh t·ªïng
            df_grouped = df_temp.groupby(['M√£ ƒë·∫°i l√Ω', 'Nh√≥m XO'])['Gi√° tr·ªã quy ƒë·ªïi'].sum().reset_index()
            
            st.write("### ‚úÖ T·ªïng gi√° tr·ªã quy ƒë·ªïi theo M√£ ƒë·∫°i l√Ω:")
            df_pivot = df_grouped.pivot_table(
                index='M√£ ƒë·∫°i l√Ω',
                columns='Nh√≥m XO',
                values='Gi√° tr·ªã quy ƒë·ªïi',
                fill_value=0
            ).rename(columns={True: "XO", False: "Kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng XO"})
            
            df_pivot["T·ªïng"] = df_pivot["XO"] + df_pivot["Kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng XO"]
            st.dataframe(df_pivot.style.format("{:,.0f}"))
        else:
            st.warning("Kh√¥ng ƒë·ªß c·ªôt ƒë·ªÉ t√≠nh to√°n nh√≥m XO / Kh√¥ng XO trong sheet 'tele HN'")


    
    
    st.write("Xem tr∆∞·ªõc d·ªØ li·ªáu c·ªôt 'STT' v√† 'Doanh thu th·ª±c thu':")
    st.dataframe(df_filtered[['STT', 'Doanh thu th·ª±c thu']].head(300))

    return {
        'total': total,
        'truong_phong': truong_phong,
        'team_lead': team_lead,
        'dai_ly_data': dai_ly_data
    }








# Giao di·ªán Streamlit
st.title("Ph√¢n t√≠ch d·ªØ li·ªáu ")

# Input cho m√£ ƒë·∫°i l√Ω
ma_dai_ly_input = st.text_input("Nh·∫≠p c√°c m√£ ƒë·∫°i l√Ω (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)", "")
ma_dai_ly_list = [ma.strip() for ma in ma_dai_ly_input.split(',')] if ma_dai_ly_input else []

uploaded_file = st.file_uploader("T·∫£i l√™n file Excel", type=['xls', 'xlsx'])

if uploaded_file:
    try:
        # ƒê·ªçc t·∫•t c·∫£ c√°c sheet
        xls = pd.read_excel(uploaded_file, sheet_name=None, engine='xlrd')
        st.success("ƒê√£ t·∫£i th√†nh c√¥ng file Excel!")
        
        
        # Danh s√°ch sheet c·∫ßn x·ª≠ l√Ω
        target_sheets = ["Telco", "tele HN", "Tele HCM"]
        totals = {}

        all_dai_ly_data = {}
        
        for sheet in target_sheets:
            if sheet in xls:
                results = process_sheet(xls[sheet], sheet, ma_dai_ly_list)
                if results is not None:
                    totals[sheet] = [results['total'], results['truong_phong'], results['team_lead']]
                    # L∆∞u th√¥ng tin ƒë·∫°i l√Ω
                    if ma_dai_ly_list:
                        all_dai_ly_data[sheet] = results['dai_ly_data']
            else:
                st.warning(f"Kh√¥ng t√¨m th·∫•y sheet: {sheet}")

        # So s√°nh t·ªïng doanh thu
        if len(totals) == len(target_sheets):
            st.write("## üîç So s√°nh c√°c lo·∫°i doanh thu")
            df_compare = pd.DataFrame.from_dict(totals, orient='index')
            df_compare.columns = ["T·ªïng Doanh thu", "Doanh thu Tr∆∞·ªüng ph√≤ng", "Doanh thu Team Lead"]
            st.dataframe(df_compare.style.format("{:,.0f}"))

        # Hi·ªÉn th·ªã th√¥ng tin v√† bi·ªÉu ƒë·ªì cho c√°c ƒë·∫°i l√Ω
        if ma_dai_ly_list and ma_dai_ly_list[0]:  # Ki·ªÉm tra c√≥ m√£ ƒë·∫°i l√Ω ƒë∆∞·ª£c nh·∫≠p kh√¥ng
            st.write("## üìä Ph√¢n t√≠ch theo M√£ ƒë·∫°i l√Ω")
            
            # T·∫°o DataFrame cho vi·ªác so s√°nh
            dai_ly_comparison = []
            for ma_dl in ma_dai_ly_list:
                for sheet in target_sheets:
                    if sheet in all_dai_ly_data and ma_dl in all_dai_ly_data[sheet]:
                        data = all_dai_ly_data[sheet][ma_dl]
                        dai_ly_comparison.append({
                            'M√£ ƒë·∫°i l√Ω': ma_dl,
                            'Sheet': sheet,
                            'Ngu·ªìn': data['nguon'],
                            'Th·ª±c thu': data['thuc_thu'],
                            'T·ª∑ l·ªá (%)': data['ti_le']
                        })
            
            if dai_ly_comparison:
                df_dai_ly = pd.DataFrame(dai_ly_comparison)
                
                # Hi·ªÉn th·ªã b·∫£ng s·ªë li·ªáu
                st.write("### B·∫£ng s·ªë li·ªáu chi ti·∫øt:")
                st.dataframe(df_dai_ly.style.format({
                    'Ngu·ªìn': '{:,.0f}',
                    'Th·ª±c thu': '{:,.0f}',
                    'T·ª∑ l·ªá (%)': '{:.2f}'
                }))
                
                # V·∫Ω bi·ªÉu ƒë·ªì so s√°nh doanh thu th·ª±c thu
                st.write("### Bi·ªÉu ƒë·ªì so s√°nh doanh thu th·ª±c thu:")
                chart_data = pd.pivot_table(
                    df_dai_ly,
                    values='Th·ª±c thu',
                    index='Sheet',
                    columns='M√£ ƒë·∫°i l√Ω',
                    fill_value=0
                )
                st.bar_chart(chart_data)

    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω file Excel: {e}")
